/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Campaign,
  ErrorResponse,
  Installation,
  Membership,
  PostInstallationRequest,
  PostInstallationResponse,
  PutInstallationRequest,
  User,
} from '../models/index';
import {
    CampaignFromJSON,
    CampaignToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InstallationFromJSON,
    InstallationToJSON,
    MembershipFromJSON,
    MembershipToJSON,
    PostInstallationRequestFromJSON,
    PostInstallationRequestToJSON,
    PostInstallationResponseFromJSON,
    PostInstallationResponseToJSON,
    PutInstallationRequestFromJSON,
    PutInstallationRequestToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface CreateInstallationRequest {
    postInstallationRequest?: PostInstallationRequest;
}

export interface DeleteInstallationRequest {
    id: string;
    putInstallationRequest?: PutInstallationRequest;
}

export interface GetInstallationRequest {
    id: string;
}

export interface UpdateInstallationRequest {
    id: string;
    putInstallationRequest?: PutInstallationRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * create an installation
     * 
     */
    async createInstallationRaw(requestParameters: CreateInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostInstallationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/installations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostInstallationRequestToJSON(requestParameters['postInstallationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostInstallationResponseFromJSON(jsonValue));
    }

    /**
     * create an installation
     * 
     */
    async createInstallation(requestParameters: CreateInstallationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostInstallationResponse> {
        const response = await this.createInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create an installation
     * 
     */
    async deleteInstallationRaw(requestParameters: DeleteInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteInstallation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/installations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: PutInstallationRequestToJSON(requestParameters['putInstallationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create an installation
     * 
     */
    async deleteInstallation(requestParameters: DeleteInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInstallationRaw(requestParameters, initOverrides);
    }

    /**
     * Get an installation
     * 
     */
    async getInstallationRaw(requestParameters: GetInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Installation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getInstallation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/installations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallationFromJSON(jsonValue));
    }

    /**
     * Get an installation
     * 
     */
    async getInstallation(requestParameters: GetInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Installation> {
        const response = await this.getInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all installations
     * 
     */
    async getInstallationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Installation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/installations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstallationFromJSON));
    }

    /**
     * Get all installations
     * 
     */
    async getInstallations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Installation>> {
        const response = await this.getInstallationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get profile
     * 
     */
    async getProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get profile
     * 
     */
    async getProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get profile campaigns
     * 
     */
    async getProfileCampaignsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Campaign>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profile/campaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CampaignFromJSON));
    }

    /**
     * Get profile campaigns
     * 
     */
    async getProfileCampaigns(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Campaign>> {
        const response = await this.getProfileCampaignsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get profile memberships
     * 
     */
    async getProfileMembershipsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Membership>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profile/memberships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipFromJSON));
    }

    /**
     * Get profile memberships
     * 
     */
    async getProfileMemberships(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Membership>> {
        const response = await this.getProfileMembershipsRaw(initOverrides);
        return await response.value();
    }

    /**
     * update an installation
     * 
     */
    async updateInstallationRaw(requestParameters: UpdateInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateInstallation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/installations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutInstallationRequestToJSON(requestParameters['putInstallationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * update an installation
     * 
     */
    async updateInstallation(requestParameters: UpdateInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateInstallationRaw(requestParameters, initOverrides);
    }

}
