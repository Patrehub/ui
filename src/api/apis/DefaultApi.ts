/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Benefit,
  ErrorResponse,
  GetGithubInstallationsResponse,
  GithubAccount,
  GithubRepository,
  GithubTeam,
  PatreonUser,
  Webhook,
} from '../models/index';
import {
    BenefitFromJSON,
    BenefitToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetGithubInstallationsResponseFromJSON,
    GetGithubInstallationsResponseToJSON,
    GithubAccountFromJSON,
    GithubAccountToJSON,
    GithubRepositoryFromJSON,
    GithubRepositoryToJSON,
    GithubTeamFromJSON,
    GithubTeamToJSON,
    PatreonUserFromJSON,
    PatreonUserToJSON,
    WebhookFromJSON,
    WebhookToJSON,
} from '../models/index';

export interface DeleteBenefitRequest {
    id: string;
}

export interface DeleteWebhookRequest {
    id: string;
}

export interface GetGithubRepositoriesRequest {
    installationId: string;
}

export interface GetGithubTeamsRequest {
    installationId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Delete Benefit
     * 
     */
    async deleteBenefitRaw(requestParameters: DeleteBenefitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteBenefit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/benefits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Benefit
     * 
     */
    async deleteBenefit(requestParameters: DeleteBenefitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBenefitRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Webhook
     * 
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Webhook
     * 
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookRaw(requestParameters, initOverrides);
    }

    /**
     * Get Benefits
     * 
     */
    async getBenefitsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Benefit>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/benefits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BenefitFromJSON));
    }

    /**
     * Get Benefits
     * 
     */
    async getBenefits(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Benefit>> {
        const response = await this.getBenefitsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Github Installations
     * 
     */
    async getGithubInstallationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGithubInstallationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/installations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGithubInstallationsResponseFromJSON(jsonValue));
    }

    /**
     * Get Github Installations
     * 
     */
    async getGithubInstallations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGithubInstallationsResponse> {
        const response = await this.getGithubInstallationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Github Profile
     * 
     */
    async getGithubProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GithubAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubAccountFromJSON(jsonValue));
    }

    /**
     * Get Github Profile
     * 
     */
    async getGithubProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GithubAccount> {
        const response = await this.getGithubProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Github Repositories
     * 
     */
    async getGithubRepositoriesRaw(requestParameters: GetGithubRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GithubRepository>>> {
        if (requestParameters['installationId'] == null) {
            throw new runtime.RequiredError(
                'installationId',
                'Required parameter "installationId" was null or undefined when calling getGithubRepositories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/repositories/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(requestParameters['installationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubRepositoryFromJSON));
    }

    /**
     * Get Github Repositories
     * 
     */
    async getGithubRepositories(requestParameters: GetGithubRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GithubRepository>> {
        const response = await this.getGithubRepositoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Github Teams
     * 
     */
    async getGithubTeamsRaw(requestParameters: GetGithubTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GithubTeam>>> {
        if (requestParameters['installationId'] == null) {
            throw new runtime.RequiredError(
                'installationId',
                'Required parameter "installationId" was null or undefined when calling getGithubTeams().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/teams/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(requestParameters['installationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubTeamFromJSON));
    }

    /**
     * Get Github Teams
     * 
     */
    async getGithubTeams(requestParameters: GetGithubTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GithubTeam>> {
        const response = await this.getGithubTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get patreon profile
     * 
     */
    async getPatreonProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatreonUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patreon/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatreonUserFromJSON(jsonValue));
    }

    /**
     * Get patreon profile
     * 
     */
    async getPatreonProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatreonUser> {
        const response = await this.getPatreonProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get webhooks
     * 
     */
    async getWebhooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Webhook>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webhooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebhookFromJSON));
    }

    /**
     * Get webhooks
     * 
     */
    async getWebhooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Webhook>> {
        const response = await this.getWebhooksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Post Benefit
     * 
     */
    async postBenefitRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Benefit>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/benefits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BenefitFromJSON(jsonValue));
    }

    /**
     * Post Benefit
     * 
     */
    async postBenefit(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Benefit> {
        const response = await this.postBenefitRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sync will invite all patrons to the github organization
     * 
     */
    async postSyncRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sync will invite all patrons to the github organization
     * 
     */
    async postSync(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSyncRaw(initOverrides);
    }

    /**
     * Post Webhook
     * 
     */
    async postWebhookRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webhooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Post Webhook
     * 
     */
    async postWebhook(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.postWebhookRaw(initOverrides);
        return await response.value();
    }

}
