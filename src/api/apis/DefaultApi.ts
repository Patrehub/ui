/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetGithubInstallationsResponse,
  GithubAccount,
  GithubRepository,
  GithubTeam,
  PatreonUser,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetGithubInstallationsResponseFromJSON,
    GetGithubInstallationsResponseToJSON,
    GithubAccountFromJSON,
    GithubAccountToJSON,
    GithubRepositoryFromJSON,
    GithubRepositoryToJSON,
    GithubTeamFromJSON,
    GithubTeamToJSON,
    PatreonUserFromJSON,
    PatreonUserToJSON,
} from '../models/index';

export interface GetGithubRepositoriesRequest {
    installationId: string;
}

export interface GetGithubTeamsRequest {
    installationId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get Github Installations
     * 
     */
    async getGithubInstallationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGithubInstallationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/installations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGithubInstallationsResponseFromJSON(jsonValue));
    }

    /**
     * Get Github Installations
     * 
     */
    async getGithubInstallations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGithubInstallationsResponse> {
        const response = await this.getGithubInstallationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Github Profile
     * 
     */
    async getGithubProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GithubAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubAccountFromJSON(jsonValue));
    }

    /**
     * Get Github Profile
     * 
     */
    async getGithubProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GithubAccount> {
        const response = await this.getGithubProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Github Repositories
     * 
     */
    async getGithubRepositoriesRaw(requestParameters: GetGithubRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GithubRepository>>> {
        if (requestParameters['installationId'] == null) {
            throw new runtime.RequiredError(
                'installationId',
                'Required parameter "installationId" was null or undefined when calling getGithubRepositories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/repositories/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(requestParameters['installationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubRepositoryFromJSON));
    }

    /**
     * Get Github Repositories
     * 
     */
    async getGithubRepositories(requestParameters: GetGithubRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GithubRepository>> {
        const response = await this.getGithubRepositoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Github Teams
     * 
     */
    async getGithubTeamsRaw(requestParameters: GetGithubTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GithubTeam>>> {
        if (requestParameters['installationId'] == null) {
            throw new runtime.RequiredError(
                'installationId',
                'Required parameter "installationId" was null or undefined when calling getGithubTeams().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github/teams/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(requestParameters['installationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubTeamFromJSON));
    }

    /**
     * Get Github Teams
     * 
     */
    async getGithubTeams(requestParameters: GetGithubTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GithubTeam>> {
        const response = await this.getGithubTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get profile patreon
     * 
     */
    async getPatreonProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatreonUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patreon/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatreonUserFromJSON(jsonValue));
    }

    /**
     * Get profile patreon
     * 
     */
    async getPatreonProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatreonUser> {
        const response = await this.getPatreonProfileRaw(initOverrides);
        return await response.value();
    }

}
