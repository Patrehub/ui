/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PatreonCampaignAvatarPhotoImageUrls } from './PatreonCampaignAvatarPhotoImageUrls';
import {
    PatreonCampaignAvatarPhotoImageUrlsFromJSON,
    PatreonCampaignAvatarPhotoImageUrlsFromJSONTyped,
    PatreonCampaignAvatarPhotoImageUrlsToJSON,
    PatreonCampaignAvatarPhotoImageUrlsToJSONTyped,
} from './PatreonCampaignAvatarPhotoImageUrls';
import type { PatreonCampaignCoverPhotoUrlSizes } from './PatreonCampaignCoverPhotoUrlSizes';
import {
    PatreonCampaignCoverPhotoUrlSizesFromJSON,
    PatreonCampaignCoverPhotoUrlSizesFromJSONTyped,
    PatreonCampaignCoverPhotoUrlSizesToJSON,
    PatreonCampaignCoverPhotoUrlSizesToJSONTyped,
} from './PatreonCampaignCoverPhotoUrlSizes';
import type { PatreonReward } from './PatreonReward';
import {
    PatreonRewardFromJSON,
    PatreonRewardFromJSONTyped,
    PatreonRewardToJSON,
    PatreonRewardToJSONTyped,
} from './PatreonReward';

/**
 * 
 * @export
 * @interface PatreonCampaign
 */
export interface PatreonCampaign {
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    id: string;
    /**
     * 
     * @type {PatreonCampaignAvatarPhotoImageUrls}
     * @memberof PatreonCampaign
     */
    avatarPhotoImageUrls: PatreonCampaignAvatarPhotoImageUrls;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    avatarPhotoUrl: string;
    /**
     * 
     * @type {number}
     * @memberof PatreonCampaign
     */
    campaignPledgeSum: number;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    coverPhotoUrl: string;
    /**
     * 
     * @type {PatreonCampaignCoverPhotoUrlSizes}
     * @memberof PatreonCampaign
     */
    coverPhotoUrlSizes: PatreonCampaignCoverPhotoUrlSizes;
    /**
     * 
     * @type {Date}
     * @memberof PatreonCampaign
     */
    createdAt: Date;
    /**
     * 
     * @type {number}
     * @memberof PatreonCampaign
     */
    creationCount: number;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    creationName: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    currency: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    discordServerId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    displayPatronGoals?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    earningsVisibility: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    imageSmallUrl: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    imageUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    isChargedUpfront: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    isChargedImmediately: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    isMonthly: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    isNewFandom: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    isNsfw: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    isPlural: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    mainVideoEmbed: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    mainVideoUrl: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    oneLiner?: string;
    /**
     * 
     * @type {number}
     * @memberof PatreonCampaign
     */
    outstandingPaymentAmountCents: number;
    /**
     * 
     * @type {number}
     * @memberof PatreonCampaign
     */
    paidMemberCount: number;
    /**
     * 
     * @type {number}
     * @memberof PatreonCampaign
     */
    patronCount: number;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    payPerName: string;
    /**
     * 
     * @type {number}
     * @memberof PatreonCampaign
     */
    pledgeSum: number;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    pledgeSumCurrency: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    pledgeUrl: string;
    /**
     * 
     * @type {Date}
     * @memberof PatreonCampaign
     */
    publishedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof PatreonCampaign
     */
    shouldDisplayChatTab: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    summary: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    thanksEmbed?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    thanksMsg?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    thanksVideoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaign
     */
    url: string;
    /**
     * 
     * @type {Array<PatreonReward>}
     * @memberof PatreonCampaign
     */
    rewards: Array<PatreonReward>;
}

/**
 * Check if a given object implements the PatreonCampaign interface.
 */
export function instanceOfPatreonCampaign(value: object): value is PatreonCampaign {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('avatarPhotoImageUrls' in value) || value['avatarPhotoImageUrls'] === undefined) return false;
    if (!('avatarPhotoUrl' in value) || value['avatarPhotoUrl'] === undefined) return false;
    if (!('campaignPledgeSum' in value) || value['campaignPledgeSum'] === undefined) return false;
    if (!('coverPhotoUrl' in value) || value['coverPhotoUrl'] === undefined) return false;
    if (!('coverPhotoUrlSizes' in value) || value['coverPhotoUrlSizes'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('creationCount' in value) || value['creationCount'] === undefined) return false;
    if (!('creationName' in value) || value['creationName'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('earningsVisibility' in value) || value['earningsVisibility'] === undefined) return false;
    if (!('imageSmallUrl' in value) || value['imageSmallUrl'] === undefined) return false;
    if (!('imageUrl' in value) || value['imageUrl'] === undefined) return false;
    if (!('isChargedUpfront' in value) || value['isChargedUpfront'] === undefined) return false;
    if (!('isChargedImmediately' in value) || value['isChargedImmediately'] === undefined) return false;
    if (!('isMonthly' in value) || value['isMonthly'] === undefined) return false;
    if (!('isNewFandom' in value) || value['isNewFandom'] === undefined) return false;
    if (!('isNsfw' in value) || value['isNsfw'] === undefined) return false;
    if (!('isPlural' in value) || value['isPlural'] === undefined) return false;
    if (!('mainVideoEmbed' in value) || value['mainVideoEmbed'] === undefined) return false;
    if (!('mainVideoUrl' in value) || value['mainVideoUrl'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('outstandingPaymentAmountCents' in value) || value['outstandingPaymentAmountCents'] === undefined) return false;
    if (!('paidMemberCount' in value) || value['paidMemberCount'] === undefined) return false;
    if (!('patronCount' in value) || value['patronCount'] === undefined) return false;
    if (!('payPerName' in value) || value['payPerName'] === undefined) return false;
    if (!('pledgeSum' in value) || value['pledgeSum'] === undefined) return false;
    if (!('pledgeSumCurrency' in value) || value['pledgeSumCurrency'] === undefined) return false;
    if (!('pledgeUrl' in value) || value['pledgeUrl'] === undefined) return false;
    if (!('publishedAt' in value) || value['publishedAt'] === undefined) return false;
    if (!('shouldDisplayChatTab' in value) || value['shouldDisplayChatTab'] === undefined) return false;
    if (!('summary' in value) || value['summary'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('rewards' in value) || value['rewards'] === undefined) return false;
    return true;
}

export function PatreonCampaignFromJSON(json: any): PatreonCampaign {
    return PatreonCampaignFromJSONTyped(json, false);
}

export function PatreonCampaignFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatreonCampaign {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'avatarPhotoImageUrls': PatreonCampaignAvatarPhotoImageUrlsFromJSON(json['avatar_photo_image_urls']),
        'avatarPhotoUrl': json['avatar_photo_url'],
        'campaignPledgeSum': json['campaign_pledge_sum'],
        'coverPhotoUrl': json['cover_photo_url'],
        'coverPhotoUrlSizes': PatreonCampaignCoverPhotoUrlSizesFromJSON(json['cover_photo_url_sizes']),
        'createdAt': (new Date(json['created_at'])),
        'creationCount': json['creation_count'],
        'creationName': json['creation_name'],
        'currency': json['currency'],
        'discordServerId': json['discord_server_id'] == null ? undefined : json['discord_server_id'],
        'displayPatronGoals': json['display_patron_goals'] == null ? undefined : json['display_patron_goals'],
        'earningsVisibility': json['earnings_visibility'],
        'imageSmallUrl': json['image_small_url'],
        'imageUrl': json['image_url'],
        'isChargedUpfront': json['is_charged_upfront'],
        'isChargedImmediately': json['is_charged_immediately'],
        'isMonthly': json['is_monthly'],
        'isNewFandom': json['is_new_fandom'],
        'isNsfw': json['is_nsfw'],
        'isPlural': json['is_plural'],
        'mainVideoEmbed': json['main_video_embed'],
        'mainVideoUrl': json['main_video_url'],
        'name': json['name'],
        'oneLiner': json['one_liner'] == null ? undefined : json['one_liner'],
        'outstandingPaymentAmountCents': json['outstanding_payment_amount_cents'],
        'paidMemberCount': json['paid_member_count'],
        'patronCount': json['patron_count'],
        'payPerName': json['pay_per_name'],
        'pledgeSum': json['pledge_sum'],
        'pledgeSumCurrency': json['pledge_sum_currency'],
        'pledgeUrl': json['pledge_url'],
        'publishedAt': (new Date(json['published_at'])),
        'shouldDisplayChatTab': json['should_display_chat_tab'],
        'summary': json['summary'],
        'thanksEmbed': json['thanks_embed'] == null ? undefined : json['thanks_embed'],
        'thanksMsg': json['thanks_msg'] == null ? undefined : json['thanks_msg'],
        'thanksVideoUrl': json['thanks_video_url'] == null ? undefined : json['thanks_video_url'],
        'url': json['url'],
        'rewards': ((json['rewards'] as Array<any>).map(PatreonRewardFromJSON)),
    };
}

export function PatreonCampaignToJSON(json: any): PatreonCampaign {
    return PatreonCampaignToJSONTyped(json, false);
}

export function PatreonCampaignToJSONTyped(value?: PatreonCampaign | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'avatar_photo_image_urls': PatreonCampaignAvatarPhotoImageUrlsToJSON(value['avatarPhotoImageUrls']),
        'avatar_photo_url': value['avatarPhotoUrl'],
        'campaign_pledge_sum': value['campaignPledgeSum'],
        'cover_photo_url': value['coverPhotoUrl'],
        'cover_photo_url_sizes': PatreonCampaignCoverPhotoUrlSizesToJSON(value['coverPhotoUrlSizes']),
        'created_at': ((value['createdAt']).toISOString()),
        'creation_count': value['creationCount'],
        'creation_name': value['creationName'],
        'currency': value['currency'],
        'discord_server_id': value['discordServerId'],
        'display_patron_goals': value['displayPatronGoals'],
        'earnings_visibility': value['earningsVisibility'],
        'image_small_url': value['imageSmallUrl'],
        'image_url': value['imageUrl'],
        'is_charged_upfront': value['isChargedUpfront'],
        'is_charged_immediately': value['isChargedImmediately'],
        'is_monthly': value['isMonthly'],
        'is_new_fandom': value['isNewFandom'],
        'is_nsfw': value['isNsfw'],
        'is_plural': value['isPlural'],
        'main_video_embed': value['mainVideoEmbed'],
        'main_video_url': value['mainVideoUrl'],
        'name': value['name'],
        'one_liner': value['oneLiner'],
        'outstanding_payment_amount_cents': value['outstandingPaymentAmountCents'],
        'paid_member_count': value['paidMemberCount'],
        'patron_count': value['patronCount'],
        'pay_per_name': value['payPerName'],
        'pledge_sum': value['pledgeSum'],
        'pledge_sum_currency': value['pledgeSumCurrency'],
        'pledge_url': value['pledgeUrl'],
        'published_at': ((value['publishedAt']).toISOString()),
        'should_display_chat_tab': value['shouldDisplayChatTab'],
        'summary': value['summary'],
        'thanks_embed': value['thanksEmbed'],
        'thanks_msg': value['thanksMsg'],
        'thanks_video_url': value['thanksVideoUrl'],
        'url': value['url'],
        'rewards': ((value['rewards'] as Array<any>).map(PatreonRewardToJSON)),
    };
}

