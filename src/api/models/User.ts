/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    about?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    canSeeNsfw?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    created: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    fullName: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    hidePledges: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    imageUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isCreator: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isEmailVerified: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    likeCount: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    thumbUrl: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    vanity: string;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('fullName' in value) || value['fullName'] === undefined) return false;
    if (!('hidePledges' in value) || value['hidePledges'] === undefined) return false;
    if (!('imageUrl' in value) || value['imageUrl'] === undefined) return false;
    if (!('isCreator' in value) || value['isCreator'] === undefined) return false;
    if (!('isEmailVerified' in value) || value['isEmailVerified'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('likeCount' in value) || value['likeCount'] === undefined) return false;
    if (!('thumbUrl' in value) || value['thumbUrl'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('vanity' in value) || value['vanity'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'about': json['about'] == null ? undefined : json['about'],
        'canSeeNsfw': json['can_see_nsfw'] == null ? undefined : json['can_see_nsfw'],
        'created': (new Date(json['created'])),
        'email': json['email'],
        'firstName': json['first_name'],
        'fullName': json['full_name'],
        'hidePledges': json['hide_pledges'],
        'imageUrl': json['image_url'],
        'isCreator': json['is_creator'],
        'isEmailVerified': json['is_email_verified'],
        'lastName': json['last_name'],
        'likeCount': json['like_count'],
        'thumbUrl': json['thumb_url'],
        'url': json['url'],
        'vanity': json['vanity'],
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'about': value['about'],
        'can_see_nsfw': value['canSeeNsfw'],
        'created': ((value['created']).toISOString()),
        'email': value['email'],
        'first_name': value['firstName'],
        'full_name': value['fullName'],
        'hide_pledges': value['hidePledges'],
        'image_url': value['imageUrl'],
        'is_creator': value['isCreator'],
        'is_email_verified': value['isEmailVerified'],
        'last_name': value['lastName'],
        'like_count': value['likeCount'],
        'thumb_url': value['thumbUrl'],
        'url': value['url'],
        'vanity': value['vanity'],
    };
}

