/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GithubAccount
 */
export interface GithubAccount {
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    login: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    nodeId: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    avatarUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    gravatarId: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    htmlUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    followersUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    followingUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    gistsUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    starredUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    subscriptionsUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    organizationsUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    reposUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    eventsUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    receivedEventsUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    userViewType: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    siteAdmin: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    blog: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    hireable?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    twitterUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubAccount
     */
    notificationEmail?: string;
    /**
     * 
     * @type {number}
     * @memberof GithubAccount
     */
    publicRepos: number;
    /**
     * 
     * @type {number}
     * @memberof GithubAccount
     */
    publicGists: number;
    /**
     * 
     * @type {number}
     * @memberof GithubAccount
     */
    followers: number;
    /**
     * 
     * @type {number}
     * @memberof GithubAccount
     */
    following: number;
    /**
     * 
     * @type {Date}
     * @memberof GithubAccount
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof GithubAccount
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the GithubAccount interface.
 */
export function instanceOfGithubAccount(value: object): value is GithubAccount {
    if (!('login' in value) || value['login'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('nodeId' in value) || value['nodeId'] === undefined) return false;
    if (!('avatarUrl' in value) || value['avatarUrl'] === undefined) return false;
    if (!('gravatarId' in value) || value['gravatarId'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('htmlUrl' in value) || value['htmlUrl'] === undefined) return false;
    if (!('followersUrl' in value) || value['followersUrl'] === undefined) return false;
    if (!('followingUrl' in value) || value['followingUrl'] === undefined) return false;
    if (!('gistsUrl' in value) || value['gistsUrl'] === undefined) return false;
    if (!('starredUrl' in value) || value['starredUrl'] === undefined) return false;
    if (!('subscriptionsUrl' in value) || value['subscriptionsUrl'] === undefined) return false;
    if (!('organizationsUrl' in value) || value['organizationsUrl'] === undefined) return false;
    if (!('reposUrl' in value) || value['reposUrl'] === undefined) return false;
    if (!('eventsUrl' in value) || value['eventsUrl'] === undefined) return false;
    if (!('receivedEventsUrl' in value) || value['receivedEventsUrl'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('userViewType' in value) || value['userViewType'] === undefined) return false;
    if (!('siteAdmin' in value) || value['siteAdmin'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('blog' in value) || value['blog'] === undefined) return false;
    if (!('publicRepos' in value) || value['publicRepos'] === undefined) return false;
    if (!('publicGists' in value) || value['publicGists'] === undefined) return false;
    if (!('followers' in value) || value['followers'] === undefined) return false;
    if (!('following' in value) || value['following'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GithubAccountFromJSON(json: any): GithubAccount {
    return GithubAccountFromJSONTyped(json, false);
}

export function GithubAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubAccount {
    if (json == null) {
        return json;
    }
    return {
        
        'login': json['login'],
        'id': json['id'],
        'nodeId': json['node_id'],
        'avatarUrl': json['avatar_url'],
        'gravatarId': json['gravatar_id'],
        'url': json['url'],
        'htmlUrl': json['html_url'],
        'followersUrl': json['followers_url'],
        'followingUrl': json['following_url'],
        'gistsUrl': json['gists_url'],
        'starredUrl': json['starred_url'],
        'subscriptionsUrl': json['subscriptions_url'],
        'organizationsUrl': json['organizations_url'],
        'reposUrl': json['repos_url'],
        'eventsUrl': json['events_url'],
        'receivedEventsUrl': json['received_events_url'],
        'type': json['type'],
        'userViewType': json['user_view_type'],
        'siteAdmin': json['site_admin'],
        'name': json['name'],
        'company': json['company'] == null ? undefined : json['company'],
        'blog': json['blog'],
        'email': json['email'] == null ? undefined : json['email'],
        'hireable': json['hireable'] == null ? undefined : json['hireable'],
        'bio': json['bio'] == null ? undefined : json['bio'],
        'twitterUsername': json['twitter_username'] == null ? undefined : json['twitter_username'],
        'notificationEmail': json['notification_email'] == null ? undefined : json['notification_email'],
        'publicRepos': json['public_repos'],
        'publicGists': json['public_gists'],
        'followers': json['followers'],
        'following': json['following'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function GithubAccountToJSON(json: any): GithubAccount {
    return GithubAccountToJSONTyped(json, false);
}

export function GithubAccountToJSONTyped(value?: GithubAccount | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'login': value['login'],
        'id': value['id'],
        'node_id': value['nodeId'],
        'avatar_url': value['avatarUrl'],
        'gravatar_id': value['gravatarId'],
        'url': value['url'],
        'html_url': value['htmlUrl'],
        'followers_url': value['followersUrl'],
        'following_url': value['followingUrl'],
        'gists_url': value['gistsUrl'],
        'starred_url': value['starredUrl'],
        'subscriptions_url': value['subscriptionsUrl'],
        'organizations_url': value['organizationsUrl'],
        'repos_url': value['reposUrl'],
        'events_url': value['eventsUrl'],
        'received_events_url': value['receivedEventsUrl'],
        'type': value['type'],
        'user_view_type': value['userViewType'],
        'site_admin': value['siteAdmin'],
        'name': value['name'],
        'company': value['company'],
        'blog': value['blog'],
        'email': value['email'],
        'hireable': value['hireable'],
        'bio': value['bio'],
        'twitter_username': value['twitterUsername'],
        'notification_email': value['notificationEmail'],
        'public_repos': value['publicRepos'],
        'public_gists': value['publicGists'],
        'followers': value['followers'],
        'following': value['following'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

