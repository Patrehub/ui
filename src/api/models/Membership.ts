/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Campaign } from './Campaign';
import {
    CampaignFromJSON,
    CampaignFromJSONTyped,
    CampaignToJSON,
    CampaignToJSONTyped,
} from './Campaign';
import type { Tier } from './Tier';
import {
    TierFromJSON,
    TierFromJSONTyped,
    TierToJSON,
    TierToJSONTyped,
} from './Tier';

/**
 * 
 * @export
 * @interface Membership
 */
export interface Membership {
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    campaignLifetimeSupportCents?: number;
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    currentlyEntitledAmountCents?: number;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    fullName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Membership
     */
    isFollower?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Membership
     */
    lastChargeDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    lastChargeStatus?: string;
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    lifetimeSupportCents?: number;
    /**
     * 
     * @type {Date}
     * @memberof Membership
     */
    nextChargeDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    patronStatus?: string;
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    pledgeCadence?: number;
    /**
     * 
     * @type {Date}
     * @memberof Membership
     */
    pledgeRelationshipStart?: Date;
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    willPayAmountCents?: number;
    /**
     * 
     * @type {Campaign}
     * @memberof Membership
     */
    campaign?: Campaign;
    /**
     * 
     * @type {Array<Tier>}
     * @memberof Membership
     */
    currentlyEntitledTiers?: Array<Tier>;
}

/**
 * Check if a given object implements the Membership interface.
 */
export function instanceOfMembership(value: object): value is Membership {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function MembershipFromJSON(json: any): Membership {
    return MembershipFromJSONTyped(json, false);
}

export function MembershipFromJSONTyped(json: any, ignoreDiscriminator: boolean): Membership {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'campaignLifetimeSupportCents': json['campaign_lifetime_support_cents'] == null ? undefined : json['campaign_lifetime_support_cents'],
        'currentlyEntitledAmountCents': json['currently_entitled_amount_cents'] == null ? undefined : json['currently_entitled_amount_cents'],
        'fullName': json['full_name'] == null ? undefined : json['full_name'],
        'isFollower': json['is_follower'] == null ? undefined : json['is_follower'],
        'lastChargeDate': json['last_charge_date'] == null ? undefined : (new Date(json['last_charge_date'])),
        'lastChargeStatus': json['last_charge_status'] == null ? undefined : json['last_charge_status'],
        'lifetimeSupportCents': json['lifetime_support_cents'] == null ? undefined : json['lifetime_support_cents'],
        'nextChargeDate': json['next_charge_date'] == null ? undefined : (new Date(json['next_charge_date'])),
        'note': json['note'] == null ? undefined : json['note'],
        'patronStatus': json['patron_status'] == null ? undefined : json['patron_status'],
        'pledgeCadence': json['pledge_cadence'] == null ? undefined : json['pledge_cadence'],
        'pledgeRelationshipStart': json['pledge_relationship_start'] == null ? undefined : (new Date(json['pledge_relationship_start'])),
        'willPayAmountCents': json['will_pay_amount_cents'] == null ? undefined : json['will_pay_amount_cents'],
        'campaign': json['campaign'] == null ? undefined : CampaignFromJSON(json['campaign']),
        'currentlyEntitledTiers': json['currently_entitled_tiers'] == null ? undefined : ((json['currently_entitled_tiers'] as Array<any>).map(TierFromJSON)),
    };
}

export function MembershipToJSON(json: any): Membership {
    return MembershipToJSONTyped(json, false);
}

export function MembershipToJSONTyped(value?: Membership | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'campaign_lifetime_support_cents': value['campaignLifetimeSupportCents'],
        'currently_entitled_amount_cents': value['currentlyEntitledAmountCents'],
        'full_name': value['fullName'],
        'is_follower': value['isFollower'],
        'last_charge_date': value['lastChargeDate'] == null ? undefined : ((value['lastChargeDate']).toISOString()),
        'last_charge_status': value['lastChargeStatus'],
        'lifetime_support_cents': value['lifetimeSupportCents'],
        'next_charge_date': value['nextChargeDate'] == null ? undefined : ((value['nextChargeDate']).toISOString()),
        'note': value['note'],
        'patron_status': value['patronStatus'],
        'pledge_cadence': value['pledgeCadence'],
        'pledge_relationship_start': value['pledgeRelationshipStart'] == null ? undefined : ((value['pledgeRelationshipStart']).toISOString()),
        'will_pay_amount_cents': value['willPayAmountCents'],
        'campaign': CampaignToJSON(value['campaign']),
        'currently_entitled_tiers': value['currentlyEntitledTiers'] == null ? undefined : ((value['currentlyEntitledTiers'] as Array<any>).map(TierToJSON)),
    };
}

