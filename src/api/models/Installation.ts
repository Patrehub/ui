/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Installation
 */
export interface Installation {
    /**
     * 
     * @type {string}
     * @memberof Installation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Installation
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Installation
     */
    status: InstallationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Installation
     */
    installationId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Installation
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Installation
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const InstallationStatusEnum = {
    Pending: 'pending',
    Active: 'active'
} as const;
export type InstallationStatusEnum = typeof InstallationStatusEnum[keyof typeof InstallationStatusEnum];


/**
 * Check if a given object implements the Installation interface.
 */
export function instanceOfInstallation(value: object): value is Installation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function InstallationFromJSON(json: any): Installation {
    return InstallationFromJSONTyped(json, false);
}

export function InstallationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Installation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'status': json['status'],
        'installationId': json['installation_id'] == null ? undefined : json['installation_id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

export function InstallationToJSON(json: any): Installation {
    return InstallationToJSONTyped(json, false);
}

export function InstallationToJSONTyped(value?: Installation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'status': value['status'],
        'installation_id': value['installationId'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

