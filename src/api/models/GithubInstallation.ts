/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GithubAccount } from './GithubAccount';
import {
    GithubAccountFromJSON,
    GithubAccountFromJSONTyped,
    GithubAccountToJSON,
    GithubAccountToJSONTyped,
} from './GithubAccount';
import type { GithubInstallationPermissions } from './GithubInstallationPermissions';
import {
    GithubInstallationPermissionsFromJSON,
    GithubInstallationPermissionsFromJSONTyped,
    GithubInstallationPermissionsToJSON,
    GithubInstallationPermissionsToJSONTyped,
} from './GithubInstallationPermissions';

/**
 * 
 * @export
 * @interface GithubInstallation
 */
export interface GithubInstallation {
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    clientId: string;
    /**
     * 
     * @type {GithubAccount}
     * @memberof GithubInstallation
     */
    account: GithubAccount;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    repositorySelection: string;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    accessTokensUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    repositoriesUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    htmlUrl: string;
    /**
     * 
     * @type {number}
     * @memberof GithubInstallation
     */
    appId: number;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    appSlug: string;
    /**
     * 
     * @type {number}
     * @memberof GithubInstallation
     */
    targetId: number;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    targetType: string;
    /**
     * 
     * @type {GithubInstallationPermissions}
     * @memberof GithubInstallation
     */
    permissions: GithubInstallationPermissions;
    /**
     * 
     * @type {Array<string>}
     * @memberof GithubInstallation
     */
    events: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof GithubInstallation
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof GithubInstallation
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof GithubInstallation
     */
    singleFileName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GithubInstallation
     */
    hasMultipleSingleFiles: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GithubInstallation
     */
    singleFilePaths: Array<string>;
}

/**
 * Check if a given object implements the GithubInstallation interface.
 */
export function instanceOfGithubInstallation(value: object): value is GithubInstallation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('account' in value) || value['account'] === undefined) return false;
    if (!('repositorySelection' in value) || value['repositorySelection'] === undefined) return false;
    if (!('accessTokensUrl' in value) || value['accessTokensUrl'] === undefined) return false;
    if (!('repositoriesUrl' in value) || value['repositoriesUrl'] === undefined) return false;
    if (!('htmlUrl' in value) || value['htmlUrl'] === undefined) return false;
    if (!('appId' in value) || value['appId'] === undefined) return false;
    if (!('appSlug' in value) || value['appSlug'] === undefined) return false;
    if (!('targetId' in value) || value['targetId'] === undefined) return false;
    if (!('targetType' in value) || value['targetType'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    if (!('events' in value) || value['events'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('hasMultipleSingleFiles' in value) || value['hasMultipleSingleFiles'] === undefined) return false;
    if (!('singleFilePaths' in value) || value['singleFilePaths'] === undefined) return false;
    return true;
}

export function GithubInstallationFromJSON(json: any): GithubInstallation {
    return GithubInstallationFromJSONTyped(json, false);
}

export function GithubInstallationFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubInstallation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'clientId': json['client_id'],
        'account': GithubAccountFromJSON(json['account']),
        'repositorySelection': json['repository_selection'],
        'accessTokensUrl': json['access_tokens_url'],
        'repositoriesUrl': json['repositories_url'],
        'htmlUrl': json['html_url'],
        'appId': json['app_id'],
        'appSlug': json['app_slug'],
        'targetId': json['target_id'],
        'targetType': json['target_type'],
        'permissions': GithubInstallationPermissionsFromJSON(json['permissions']),
        'events': json['events'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'singleFileName': json['single_file_name'] == null ? undefined : json['single_file_name'],
        'hasMultipleSingleFiles': json['has_multiple_single_files'],
        'singleFilePaths': json['single_file_paths'],
    };
}

export function GithubInstallationToJSON(json: any): GithubInstallation {
    return GithubInstallationToJSONTyped(json, false);
}

export function GithubInstallationToJSONTyped(value?: GithubInstallation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'client_id': value['clientId'],
        'account': GithubAccountToJSON(value['account']),
        'repository_selection': value['repositorySelection'],
        'access_tokens_url': value['accessTokensUrl'],
        'repositories_url': value['repositoriesUrl'],
        'html_url': value['htmlUrl'],
        'app_id': value['appId'],
        'app_slug': value['appSlug'],
        'target_id': value['targetId'],
        'target_type': value['targetType'],
        'permissions': GithubInstallationPermissionsToJSON(value['permissions']),
        'events': value['events'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'single_file_name': value['singleFileName'],
        'has_multiple_single_files': value['hasMultipleSingleFiles'],
        'single_file_paths': value['singleFilePaths'],
    };
}

