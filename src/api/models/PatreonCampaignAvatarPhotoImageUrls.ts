/* tslint:disable */
/* eslint-disable */
/**
 * Patrehub API
 * This is a description of what this does
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatreonCampaignAvatarPhotoImageUrls
 */
export interface PatreonCampaignAvatarPhotoImageUrls {
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    _default?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    defaultBlurred?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    defaultBlurredSmall?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    defaultSmall?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    original?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    thumbnail?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    thumbnailLarge?: string;
    /**
     * 
     * @type {string}
     * @memberof PatreonCampaignAvatarPhotoImageUrls
     */
    thumbnailSmall?: string;
}

/**
 * Check if a given object implements the PatreonCampaignAvatarPhotoImageUrls interface.
 */
export function instanceOfPatreonCampaignAvatarPhotoImageUrls(value: object): value is PatreonCampaignAvatarPhotoImageUrls {
    return true;
}

export function PatreonCampaignAvatarPhotoImageUrlsFromJSON(json: any): PatreonCampaignAvatarPhotoImageUrls {
    return PatreonCampaignAvatarPhotoImageUrlsFromJSONTyped(json, false);
}

export function PatreonCampaignAvatarPhotoImageUrlsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatreonCampaignAvatarPhotoImageUrls {
    if (json == null) {
        return json;
    }
    return {
        
        '_default': json['default'] == null ? undefined : json['default'],
        'defaultBlurred': json['default_blurred'] == null ? undefined : json['default_blurred'],
        'defaultBlurredSmall': json['default_blurred_small'] == null ? undefined : json['default_blurred_small'],
        'defaultSmall': json['default_small'] == null ? undefined : json['default_small'],
        'original': json['original'] == null ? undefined : json['original'],
        'thumbnail': json['thumbnail'] == null ? undefined : json['thumbnail'],
        'thumbnailLarge': json['thumbnail_large'] == null ? undefined : json['thumbnail_large'],
        'thumbnailSmall': json['thumbnail_small'] == null ? undefined : json['thumbnail_small'],
    };
}

export function PatreonCampaignAvatarPhotoImageUrlsToJSON(json: any): PatreonCampaignAvatarPhotoImageUrls {
    return PatreonCampaignAvatarPhotoImageUrlsToJSONTyped(json, false);
}

export function PatreonCampaignAvatarPhotoImageUrlsToJSONTyped(value?: PatreonCampaignAvatarPhotoImageUrls | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'default': value['_default'],
        'default_blurred': value['defaultBlurred'],
        'default_blurred_small': value['defaultBlurredSmall'],
        'default_small': value['defaultSmall'],
        'original': value['original'],
        'thumbnail': value['thumbnail'],
        'thumbnail_large': value['thumbnailLarge'],
        'thumbnail_small': value['thumbnailSmall'],
    };
}

